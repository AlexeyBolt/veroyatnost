import pandas as pd
from scipy import stats
import numpy as np
print(''' 1 Задача) Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95, если выборочная средняя M = 80,
# а объем выборки n = 256.''')
X_mean = 80
n = 256
sig = 16
alph = 1.96 
print(stats.norm.ppf(0.975))
up_int = X_mean + alph * sig / np.sqrt(n)
print(f'{up_int} верхний интервал')
low_int = X_mean - alph * sig / np.sqrt(n)
print(f'{low_int} нижний интервал')

print('''2 Задача.  В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, 
получены опытные данные:
6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей, 
оценить истинное значение величины X при помощи доверительного интервала, покрывающего это значение
с доверительной вероятностью 0,95.''')
a = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
a_mean = np.mean(a) 
print(f'{a_mean} среднее значение')
D = np.var(a, ddof=1) 
print(f'{D} дисперсия')
t = stats.t.ppf(0.975, 9)  
print(f'{t} степеней свободы')
X_1 = a_mean - t * np.sqrt(D/10)
X_2 = a_mean + t * np.sqrt(D/10)
print(f'{X_1} нижняя граница {X_2} верхняя граница')

print(''' 3 Задача. Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
Рост матерей  178, 165, 165, 173, 168, 155, 160, 164, 178, 175
Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей.''')
height_D = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
height_M = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
mean_D = np.mean(height_D)
print(mean_D)
mean_M = np.mean(height_M)
print(mean_M)
delta = mean_M - mean_D
print(delta)
t = stats.t.ppf(0.975, 18) 
print(t)
d_height_D = np.var(height_D, ddof=1)
print(d_height_D)
d_height_M = np.var(height_M, ddof=1)
print(d_height_M)
d_height = (d_height_D + d_height_M)/2
print(d_height)
SE = np.sqrt(d_height/10 + d_height/10) 
print(SE)
L = delta - t * SE
print(f'нижняя граница {L}')
U = delta + t *SE
print(f'верхняя граница {U}')
